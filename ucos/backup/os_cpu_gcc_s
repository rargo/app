/*ucos port,task save context,from top to bottom:pc,lr,r12,r11......r0,cpsr
 */

        .global os_enter_critical
        .global os_exit_critical
        .global OS_TASK_SW
        .global OSStartHighRdy
        .global ucos_irq_handler

        .extern OSTCBCur
        .extern OSPrioCur
        .extern OSTCBHighRdy
        .extern OSPrioHighRdy
        .extern OSRunning
        .extern OSTaskSwHook
        .extern OSIntEnter
        .extern OSIntExit
        .extern os_need_reschedule

os_enter_critical:
	mrs	r1,cpsr
	mov	r2,r1
	orr	r1,r1,#0xc0	
	msr	cpsr_c,r1
	str	r2,[r0]
	mov	pc,lr


os_exit_critical:
	msr	cpsr_c,r0
	mov	pc,lr


        /*switch task in sys mode*/
OS_TASK_SW:
        bl      OSTaskSwHook

        stmfd   r13!,{lr}   @save function lr as current task pc
        stmfd   r13!,{r0-r12,lr}   @save r0-r12,save function lr as current task lr
        mrs     r0,cpsr
        stmfd   r13!,{r0}   @save current task cpsr
		ldr	r0,=OSTCBCur   @r0 = OSTCBCur,(r0 has been modify,because in ATPC,r0-r3 is free to used,so we don't care) 
        str     r13,[r0]   @update OSTCBCur->OSTCBStkPtr to current stack pointer
        
        b       switch_to_new_task
        .ltorg


         /*use only once,OSStart call OSStartHighRdy to run the highest priority task
         */
OSStartHighRdy:
        bl      OSTaskSwHook

        ldr     r0,=OSRunning
        mov     r1,#1
        str     r1,[r0]   @OSRunning = 1

        b       restore_new_task
        .ltorg

		.equ VIC0_ADDR,0x71200000
		.equ VIC1_ADDR,0x71300000
		.equ VIC_VECT_ADDR,0xF00
		.equ VIC_INT_EN,0x10
		.equ VIC_INT_EN_CLR,0x14
		.equ IRQ_MAX,64
        
@ucos_irq_handler:
@	sub		lr,lr,#4
@	stmfd	r13!,{r0-r12,lr}
@	mrs		r0,spsr
@	stmfd	r13!,{r0}
@
@	@bl	OSIntEnter
@
@	@ note, we must read VIC_VECT_ADDR to clear vic interrupt request 
@	@ before enable irq again,or once irq reenable,it will happen immediately
@	@ XXX, need to read VIC1 VIC_VECT_ADDR ??
@	ldr	r4,=(VIC0_ADDR+VIC_VECT_ADDR)
@	ldr	r0,[r4]
@
@	msr	cpsr_c,#(0x00 | 0x13) @ switch to svc mode to handle interrupt
@	stmfd	r13!,{lr} @save lr_svc
@
@	ldr	r1,=irq_c_handler @r0 is intterupt source number
@	mov	lr,pc
@	bx	r1
@
@	ldmfd	r13!,{lr} @restore lr_svc
@	msr	cpsr_c,#(0x80 | 0x12) @ switch to irq mode with irq mask
@
@	ldr	r0,=IRQ_MAX
@	str	r0,[r4]
@
@	@bl	OSIntExit
@
@	@ldr	r0,=os_need_reschedule
@	@ldr	r1,[r0]
@	@cmp	r1,#0
@	@bne	int_switch_task 
@	ldmfd	r13!,{r0}
@	msr		spsr_cxsf,r0
@	ldmfd	r13!,{r0-r12,pc}^   @@normal interrupt exit
@	.ltorg
@

int_switch_task:	
	mov     r1,#0
	str     r1,[r0]   @os_need_reschedule = 0

	@save current task,we push r0-r3 when we entered irq.
	ldr	r0,=OSTCBCur   @r0 = OSTCBCur
	stmfd   r13!,{r13}^   @load current task stack pointer
	ldmfd   r13!,{r3}   @r3 = current task tack pointer(sys/usr r13)
	ldr		r1,[r13,#20]   @load irq lr from irq stack
	ldr		r2,[r13,#16]   @load r12 from irq stack
	stmfd	r3!,{r1}   @save irq lr as old task pc
	stmfd	r3!,{r14}^   @save current task sys/usr lr
	stmfd	r3!,{r2}   @save current task r12
	stmfd	r3!,{r4-r11}   @save current task r4-r11
	mov		r4,r3   @r4 = OSTCBCur->OSTCBStkPtr
	mov     r11,r0   @r11 = OSTCBCur
	ldmfd	r13!,{r0-r3,r12,lr}   @load r0-r3 from irq stack,irq stack now balance
	stmfd	r4!,{r0-r3}   @save current task r0-r3
	mrs		r0,spsr
	stmfd	r4!,{r0}   @save spsr as current task cpsr
	str     r4,[r11]   @OSTCBcur->OSTCBStkPtr = r11,update current task stack pointer

switch_to_new_task:
	@update OSTCBCur,OSPrioCur
	ldr	r0,=OSTCBCur   @
	ldr	r1,=OSPrioCur   @	OSTCBCur = OSTCBHighRdy   @
	ldr	r2,=OSTCBHighRdy   @	OSPrioCur = OSPrioHighRdy   @
	ldr	r3,=OSPrioHighRdy
	ldr	r4,[r2]
	str	r4,[r0]
	ldrb	r5,[r3]
	strb	r5,[r1]

	@switch to sys mode,restore task
restore_new_task:
	LDR	r0,=OSTCBCur
	LDR	r1,[r0]   @r1 = OSTCBCur->OSTCBStkPtr,load new task stack pointer

	mrs 	r2,cpsr   @r2 = cpsr

	orr     r3,r2,#0x1f   @switch to sys mode
	msr     cpsr_c,r3
	add     r13,r1,#64   @update sys/usr mode stack pointer r13

	bic		r3,r2,#0x1f
	orr     r3,r3,#0x1b   @switch to undef mode,we don't use undef mode,so we can use it's stack pointer to restore task
	msr     cpsr_c,r3
	mov     r13,r1   @undef r13 = OSTCBCur->OSTCBStkPtr

	ldmfd	r13!,{r0}   @load cpsr from new task stack
	msr		spsr,r0   @
	ldmfd	r13!,{r0-r12,lr}^   @restore sys/usr mode register
	ldmfd   r13!,{pc}^   @restore pc,switch to sys/usr mode

	/*note:
	 *1,the last two instruction cann't be replace with one "ldm r13!,{r0-r12,lr,pc}^"
	 *  see arm instruction list
	 *2,if we use sys mode to restore register,instruction would be like these:
	 *         mrs     r2,cpsr
	 *         orr     r3,r2,#0x1f
	 *         msr     cpsr_c,r3
	 *         ldmfd   r13!,{r0}   @
	 *         msr	   cpsr,r0   @note!!!,interrupt enable now,may happen here,than program would crash!!!
	 *         ldmf    r13!,{r0-r12,lr,pc}   @
	 */
        .ltorg

